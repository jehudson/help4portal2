'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="support2")>  _
Partial Public Class Support2DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertOrganisationDetail(instance As OrganisationDetail)
    End Sub
  Partial Private Sub UpdateOrganisationDetail(instance As OrganisationDetail)
    End Sub
  Partial Private Sub DeleteOrganisationDetail(instance As OrganisationDetail)
    End Sub
  Partial Private Sub InsertSecurityGroupName(instance As SecurityGroupName)
    End Sub
  Partial Private Sub UpdateSecurityGroupName(instance As SecurityGroupName)
    End Sub
  Partial Private Sub DeleteSecurityGroupName(instance As SecurityGroupName)
    End Sub
  Partial Private Sub InsertSecurityGroup(instance As SecurityGroup)
    End Sub
  Partial Private Sub UpdateSecurityGroup(instance As SecurityGroup)
    End Sub
  Partial Private Sub DeleteSecurityGroup(instance As SecurityGroup)
    End Sub
  Partial Private Sub InsertSecurityAssociation(instance As SecurityAssociation)
    End Sub
  Partial Private Sub UpdateSecurityAssociation(instance As SecurityAssociation)
    End Sub
  Partial Private Sub DeleteSecurityAssociation(instance As SecurityAssociation)
    End Sub
  Partial Private Sub InsertSite(instance As Site)
    End Sub
  Partial Private Sub UpdateSite(instance As Site)
    End Sub
  Partial Private Sub DeleteSite(instance As Site)
    End Sub
  Partial Private Sub InsertSubnetType(instance As SubnetType)
    End Sub
  Partial Private Sub UpdateSubnetType(instance As SubnetType)
    End Sub
  Partial Private Sub DeleteSubnetType(instance As SubnetType)
    End Sub
  Partial Private Sub InsertNIC(instance As NIC)
    End Sub
  Partial Private Sub UpdateNIC(instance As NIC)
    End Sub
  Partial Private Sub DeleteNIC(instance As NIC)
    End Sub
  Partial Private Sub InsertSubnet(instance As Subnet)
    End Sub
  Partial Private Sub UpdateSubnet(instance As Subnet)
    End Sub
  Partial Private Sub DeleteSubnet(instance As Subnet)
    End Sub
  Partial Private Sub InsertDeviceStatus(instance As DeviceStatus)
    End Sub
  Partial Private Sub UpdateDeviceStatus(instance As DeviceStatus)
    End Sub
  Partial Private Sub DeleteDeviceStatus(instance As DeviceStatus)
    End Sub
  Partial Private Sub InsertDevice(instance As Device)
    End Sub
  Partial Private Sub UpdateDevice(instance As Device)
    End Sub
  Partial Private Sub DeleteDevice(instance As Device)
    End Sub
  Partial Private Sub InsertOperatingSystem(instance As OperatingSystem)
    End Sub
  Partial Private Sub UpdateOperatingSystem(instance As OperatingSystem)
    End Sub
  Partial Private Sub DeleteOperatingSystem(instance As OperatingSystem)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("support2ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property OrganisationDetails() As System.Data.Linq.Table(Of OrganisationDetail)
		Get
			Return Me.GetTable(Of OrganisationDetail)
		End Get
	End Property
	
	Public ReadOnly Property SecurityGroupNames() As System.Data.Linq.Table(Of SecurityGroupName)
		Get
			Return Me.GetTable(Of SecurityGroupName)
		End Get
	End Property
	
	Public ReadOnly Property SecurityGroups() As System.Data.Linq.Table(Of SecurityGroup)
		Get
			Return Me.GetTable(Of SecurityGroup)
		End Get
	End Property
	
	Public ReadOnly Property EmployeeNameIDViews() As System.Data.Linq.Table(Of EmployeeNameIDView)
		Get
			Return Me.GetTable(Of EmployeeNameIDView)
		End Get
	End Property
	
	Public ReadOnly Property SecurityAssociations() As System.Data.Linq.Table(Of SecurityAssociation)
		Get
			Return Me.GetTable(Of SecurityAssociation)
		End Get
	End Property
	
	Public ReadOnly Property SecurityAssociationOrganisationViews() As System.Data.Linq.Table(Of SecurityAssociationOrganisationView)
		Get
			Return Me.GetTable(Of SecurityAssociationOrganisationView)
		End Get
	End Property
	
	Public ReadOnly Property Sites() As System.Data.Linq.Table(Of Site)
		Get
			Return Me.GetTable(Of Site)
		End Get
	End Property
	
	Public ReadOnly Property SecurityAssociationEmployeeViews() As System.Data.Linq.Table(Of SecurityAssociationEmployeeView)
		Get
			Return Me.GetTable(Of SecurityAssociationEmployeeView)
		End Get
	End Property
	
	Public ReadOnly Property SubnetTypes() As System.Data.Linq.Table(Of SubnetType)
		Get
			Return Me.GetTable(Of SubnetType)
		End Get
	End Property
	
	Public ReadOnly Property NICs() As System.Data.Linq.Table(Of NIC)
		Get
			Return Me.GetTable(Of NIC)
		End Get
	End Property
	
	Public ReadOnly Property Subnets() As System.Data.Linq.Table(Of Subnet)
		Get
			Return Me.GetTable(Of Subnet)
		End Get
	End Property
	
	Public ReadOnly Property DeviceStatus() As System.Data.Linq.Table(Of DeviceStatus)
		Get
			Return Me.GetTable(Of DeviceStatus)
		End Get
	End Property
	
	Public ReadOnly Property DeviceOrganisationSiteParentViews() As System.Data.Linq.Table(Of DeviceOrganisationSiteParentView)
		Get
			Return Me.GetTable(Of DeviceOrganisationSiteParentView)
		End Get
	End Property
	
	Public ReadOnly Property CredentialsTypes() As System.Data.Linq.Table(Of CredentialsType)
		Get
			Return Me.GetTable(Of CredentialsType)
		End Get
	End Property
	
	Public ReadOnly Property Credentials() As System.Data.Linq.Table(Of Credential)
		Get
			Return Me.GetTable(Of Credential)
		End Get
	End Property
	
	Public ReadOnly Property Devices() As System.Data.Linq.Table(Of Device)
		Get
			Return Me.GetTable(Of Device)
		End Get
	End Property
	
	Public ReadOnly Property OperatingSystems() As System.Data.Linq.Table(Of OperatingSystem)
		Get
			Return Me.GetTable(Of OperatingSystem)
		End Get
	End Property
	
	Public ReadOnly Property DeviceDeviceStatusViews() As System.Data.Linq.Table(Of DeviceDeviceStatusView)
		Get
			Return Me.GetTable(Of DeviceDeviceStatusView)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrganisationDetails")>  _
Partial Public Class OrganisationDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrganisationID As Integer
	
	Private _AccountIdName As String
	
	Private _OrganisationDescription As String
	
	Private _Inactive As Boolean
	
	Private _Sites As EntitySet(Of Site)
	
	Private _SecurityAssociation As EntityRef(Of SecurityAssociation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrganisationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrganisationIDChanged()
    End Sub
    Partial Private Sub OnAccountIdNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountIdNameChanged()
    End Sub
    Partial Private Sub OnOrganisationDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnOrganisationDescriptionChanged()
    End Sub
    Partial Private Sub OnInactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sites = New EntitySet(Of Site)(AddressOf Me.attach_Sites, AddressOf Me.detach_Sites)
		Me._SecurityAssociation = CType(Nothing, EntityRef(Of SecurityAssociation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OrganisationID() As Integer
		Get
			Return Me._OrganisationID
		End Get
		Set
			If ((Me._OrganisationID = value)  _
						= false) Then
				If Me._SecurityAssociation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrganisationIDChanging(value)
				Me.SendPropertyChanging
				Me._OrganisationID = value
				Me.SendPropertyChanged("OrganisationID")
				Me.OnOrganisationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountIdName", DbType:="NVarChar(50)")>  _
	Public Property AccountIdName() As String
		Get
			Return Me._AccountIdName
		End Get
		Set
			If (String.Equals(Me._AccountIdName, value) = false) Then
				Me.OnAccountIdNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountIdName = value
				Me.SendPropertyChanged("AccountIdName")
				Me.OnAccountIdNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationDescription", DbType:="NVarChar(MAX)")>  _
	Public Property OrganisationDescription() As String
		Get
			Return Me._OrganisationDescription
		End Get
		Set
			If (String.Equals(Me._OrganisationDescription, value) = false) Then
				Me.OnOrganisationDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._OrganisationDescription = value
				Me.SendPropertyChanged("OrganisationDescription")
				Me.OnOrganisationDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit NOT NULL")>  _
	Public Property Inactive() As Boolean
		Get
			Return Me._Inactive
		End Get
		Set
			If ((Me._Inactive = value)  _
						= false) Then
				Me.OnInactiveChanging(value)
				Me.SendPropertyChanging
				Me._Inactive = value
				Me.SendPropertyChanged("Inactive")
				Me.OnInactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrganisationDetail_Site", Storage:="_Sites", ThisKey:="OrganisationID", OtherKey:="OrganisationID")>  _
	Public Property Sites() As EntitySet(Of Site)
		Get
			Return Me._Sites
		End Get
		Set
			Me._Sites.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityAssociation_OrganisationDetail", Storage:="_SecurityAssociation", ThisKey:="OrganisationID", OtherKey:="OrganisationID", IsForeignKey:=true)>  _
	Public Property SecurityAssociation() As SecurityAssociation
		Get
			Return Me._SecurityAssociation.Entity
		End Get
		Set
			Dim previousValue As SecurityAssociation = Me._SecurityAssociation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SecurityAssociation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SecurityAssociation.Entity = Nothing
					previousValue.OrganisationDetails.Remove(Me)
				End If
				Me._SecurityAssociation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrganisationDetails.Add(Me)
					Me._OrganisationID = value.OrganisationID
				Else
					Me._OrganisationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SecurityAssociation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sites(ByVal entity As Site)
		Me.SendPropertyChanging
		entity.OrganisationDetail = Me
	End Sub
	
	Private Sub detach_Sites(ByVal entity As Site)
		Me.SendPropertyChanging
		entity.OrganisationDetail = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SecurityGroupName")>  _
Partial Public Class SecurityGroupName
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SecurityGroupNameID As Integer
	
	Private _SecurityGroupName As String
	
	Private _SecurityGroup As EntityRef(Of SecurityGroup)
	
	Private _SecurityAssociation As EntityRef(Of SecurityAssociation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanged()
    End Sub
    Partial Private Sub OnSecurityGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnSecurityGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SecurityGroup = CType(Nothing, EntityRef(Of SecurityGroup))
		Me._SecurityAssociation = CType(Nothing, EntityRef(Of SecurityAssociation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupNameID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SecurityGroupNameID() As Integer
		Get
			Return Me._SecurityGroupNameID
		End Get
		Set
			If ((Me._SecurityGroupNameID = value)  _
						= false) Then
				If (Me._SecurityGroup.HasLoadedOrAssignedValue OrElse Me._SecurityAssociation.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSecurityGroupNameIDChanging(value)
				Me.SendPropertyChanging
				Me._SecurityGroupNameID = value
				Me.SendPropertyChanged("SecurityGroupNameID")
				Me.OnSecurityGroupNameIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupName", DbType:="NVarChar(50)")>  _
	Public Property SecurityGroupName() As String
		Get
			Return Me._SecurityGroupName
		End Get
		Set
			If (String.Equals(Me._SecurityGroupName, value) = false) Then
				Me.OnSecurityGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._SecurityGroupName = value
				Me.SendPropertyChanged("SecurityGroupName")
				Me.OnSecurityGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityGroup_SecurityGroupName", Storage:="_SecurityGroup", ThisKey:="SecurityGroupNameID", OtherKey:="SecurityGroupNameID", IsForeignKey:=true)>  _
	Public Property SecurityGroup() As SecurityGroup
		Get
			Return Me._SecurityGroup.Entity
		End Get
		Set
			Dim previousValue As SecurityGroup = Me._SecurityGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SecurityGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SecurityGroup.Entity = Nothing
					previousValue.SecurityGroupNames.Remove(Me)
				End If
				Me._SecurityGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SecurityGroupNames.Add(Me)
					Me._SecurityGroupNameID = value.SecurityGroupNameID
				Else
					Me._SecurityGroupNameID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SecurityGroup")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityAssociation_SecurityGroupName", Storage:="_SecurityAssociation", ThisKey:="SecurityGroupNameID", OtherKey:="SecurityGroupNameID", IsForeignKey:=true)>  _
	Public Property SecurityAssociation() As SecurityAssociation
		Get
			Return Me._SecurityAssociation.Entity
		End Get
		Set
			Dim previousValue As SecurityAssociation = Me._SecurityAssociation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SecurityAssociation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SecurityAssociation.Entity = Nothing
					previousValue.SecurityGroupNames.Remove(Me)
				End If
				Me._SecurityAssociation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SecurityGroupNames.Add(Me)
					Me._SecurityGroupNameID = value.SecurityGroupNameID
				Else
					Me._SecurityGroupNameID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SecurityAssociation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SecurityGroup")>  _
Partial Public Class SecurityGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SecurityGroupID As Integer
	
	Private _SecurityGroupNameID As Integer
	
	Private _EmployeeID As Integer
	
	Private _SecurityGroupNames As EntitySet(Of SecurityGroupName)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSecurityGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSecurityGroupIDChanged()
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SecurityGroupNames = New EntitySet(Of SecurityGroupName)(AddressOf Me.attach_SecurityGroupNames, AddressOf Me.detach_SecurityGroupNames)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SecurityGroupID() As Integer
		Get
			Return Me._SecurityGroupID
		End Get
		Set
			If ((Me._SecurityGroupID = value)  _
						= false) Then
				Me.OnSecurityGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._SecurityGroupID = value
				Me.SendPropertyChanged("SecurityGroupID")
				Me.OnSecurityGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupNameID", DbType:="Int NOT NULL")>  _
	Public Property SecurityGroupNameID() As Integer
		Get
			Return Me._SecurityGroupNameID
		End Get
		Set
			If ((Me._SecurityGroupNameID = value)  _
						= false) Then
				Me.OnSecurityGroupNameIDChanging(value)
				Me.SendPropertyChanging
				Me._SecurityGroupNameID = value
				Me.SendPropertyChanged("SecurityGroupNameID")
				Me.OnSecurityGroupNameIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int NOT NULL")>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityGroup_SecurityGroupName", Storage:="_SecurityGroupNames", ThisKey:="SecurityGroupNameID", OtherKey:="SecurityGroupNameID")>  _
	Public Property SecurityGroupNames() As EntitySet(Of SecurityGroupName)
		Get
			Return Me._SecurityGroupNames
		End Get
		Set
			Me._SecurityGroupNames.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SecurityGroupNames(ByVal entity As SecurityGroupName)
		Me.SendPropertyChanging
		entity.SecurityGroup = Me
	End Sub
	
	Private Sub detach_SecurityGroupNames(ByVal entity As SecurityGroupName)
		Me.SendPropertyChanging
		entity.SecurityGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmployeeNameIDView")>  _
Partial Public Class EmployeeNameIDView
	
	Private _FullName As String
	
	Private _SecurityGroupID As Integer
	
	Private _SecurityGroupNameID As Integer
	
	Private _EmployeeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupID", DbType:="Int NOT NULL")>  _
	Public Property SecurityGroupID() As Integer
		Get
			Return Me._SecurityGroupID
		End Get
		Set
			If ((Me._SecurityGroupID = value)  _
						= false) Then
				Me._SecurityGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupNameID", DbType:="Int NOT NULL")>  _
	Public Property SecurityGroupNameID() As Integer
		Get
			Return Me._SecurityGroupNameID
		End Get
		Set
			If ((Me._SecurityGroupNameID = value)  _
						= false) Then
				Me._SecurityGroupNameID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int NOT NULL")>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me._EmployeeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SecurityAssociation")>  _
Partial Public Class SecurityAssociation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SecurityAssociationID As Integer
	
	Private _OrganisationID As Integer
	
	Private _SecurityGroupNameID As Integer
	
	Private _OrganisationDetails As EntitySet(Of OrganisationDetail)
	
	Private _SecurityGroupNames As EntitySet(Of SecurityGroupName)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSecurityAssociationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSecurityAssociationIDChanged()
    End Sub
    Partial Private Sub OnOrganisationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrganisationIDChanged()
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSecurityGroupNameIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrganisationDetails = New EntitySet(Of OrganisationDetail)(AddressOf Me.attach_OrganisationDetails, AddressOf Me.detach_OrganisationDetails)
		Me._SecurityGroupNames = New EntitySet(Of SecurityGroupName)(AddressOf Me.attach_SecurityGroupNames, AddressOf Me.detach_SecurityGroupNames)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityAssociationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SecurityAssociationID() As Integer
		Get
			Return Me._SecurityAssociationID
		End Get
		Set
			If ((Me._SecurityAssociationID = value)  _
						= false) Then
				Me.OnSecurityAssociationIDChanging(value)
				Me.SendPropertyChanging
				Me._SecurityAssociationID = value
				Me.SendPropertyChanged("SecurityAssociationID")
				Me.OnSecurityAssociationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", DbType:="Int NOT NULL")>  _
	Public Property OrganisationID() As Integer
		Get
			Return Me._OrganisationID
		End Get
		Set
			If ((Me._OrganisationID = value)  _
						= false) Then
				Me.OnOrganisationIDChanging(value)
				Me.SendPropertyChanging
				Me._OrganisationID = value
				Me.SendPropertyChanged("OrganisationID")
				Me.OnOrganisationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupNameID", DbType:="Int NOT NULL")>  _
	Public Property SecurityGroupNameID() As Integer
		Get
			Return Me._SecurityGroupNameID
		End Get
		Set
			If ((Me._SecurityGroupNameID = value)  _
						= false) Then
				Me.OnSecurityGroupNameIDChanging(value)
				Me.SendPropertyChanging
				Me._SecurityGroupNameID = value
				Me.SendPropertyChanged("SecurityGroupNameID")
				Me.OnSecurityGroupNameIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityAssociation_OrganisationDetail", Storage:="_OrganisationDetails", ThisKey:="OrganisationID", OtherKey:="OrganisationID")>  _
	Public Property OrganisationDetails() As EntitySet(Of OrganisationDetail)
		Get
			Return Me._OrganisationDetails
		End Get
		Set
			Me._OrganisationDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SecurityAssociation_SecurityGroupName", Storage:="_SecurityGroupNames", ThisKey:="SecurityGroupNameID", OtherKey:="SecurityGroupNameID")>  _
	Public Property SecurityGroupNames() As EntitySet(Of SecurityGroupName)
		Get
			Return Me._SecurityGroupNames
		End Get
		Set
			Me._SecurityGroupNames.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrganisationDetails(ByVal entity As OrganisationDetail)
		Me.SendPropertyChanging
		entity.SecurityAssociation = Me
	End Sub
	
	Private Sub detach_OrganisationDetails(ByVal entity As OrganisationDetail)
		Me.SendPropertyChanging
		entity.SecurityAssociation = Nothing
	End Sub
	
	Private Sub attach_SecurityGroupNames(ByVal entity As SecurityGroupName)
		Me.SendPropertyChanging
		entity.SecurityAssociation = Me
	End Sub
	
	Private Sub detach_SecurityGroupNames(ByVal entity As SecurityGroupName)
		Me.SendPropertyChanging
		entity.SecurityAssociation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SecurityAssociationOrganisationView")>  _
Partial Public Class SecurityAssociationOrganisationView
	
	Private _AccountIdName As String
	
	Private _SecurityGroupNameID As Integer
	
	Private _SecurityGroupName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountIdName", DbType:="NVarChar(50)")>  _
	Public Property AccountIdName() As String
		Get
			Return Me._AccountIdName
		End Get
		Set
			If (String.Equals(Me._AccountIdName, value) = false) Then
				Me._AccountIdName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupNameID", DbType:="Int NOT NULL")>  _
	Public Property SecurityGroupNameID() As Integer
		Get
			Return Me._SecurityGroupNameID
		End Get
		Set
			If ((Me._SecurityGroupNameID = value)  _
						= false) Then
				Me._SecurityGroupNameID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityGroupName", DbType:="NVarChar(50)")>  _
	Public Property SecurityGroupName() As String
		Get
			Return Me._SecurityGroupName
		End Get
		Set
			If (String.Equals(Me._SecurityGroupName, value) = false) Then
				Me._SecurityGroupName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sites")>  _
Partial Public Class Site
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SiteID As Integer
	
	Private _OrganisationID As Integer
	
	Private _SiteDescription As String
	
	Private _SiteInternalDomain As String
	
	Private _SiteName As String
	
	Private _Active As Boolean
	
	Private _OrganisationDetail As EntityRef(Of OrganisationDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnOrganisationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrganisationIDChanged()
    End Sub
    Partial Private Sub OnSiteDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSiteDescriptionChanged()
    End Sub
    Partial Private Sub OnSiteInternalDomainChanging(value As String)
    End Sub
    Partial Private Sub OnSiteInternalDomainChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrganisationDetail = CType(Nothing, EntityRef(Of OrganisationDetail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SiteID() As Integer
		Get
			Return Me._SiteID
		End Get
		Set
			If ((Me._SiteID = value)  _
						= false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", DbType:="Int NOT NULL")>  _
	Public Property OrganisationID() As Integer
		Get
			Return Me._OrganisationID
		End Get
		Set
			If ((Me._OrganisationID = value)  _
						= false) Then
				If Me._OrganisationDetail.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrganisationIDChanging(value)
				Me.SendPropertyChanging
				Me._OrganisationID = value
				Me.SendPropertyChanged("OrganisationID")
				Me.OnOrganisationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteDescription", DbType:="NVarChar(MAX)")>  _
	Public Property SiteDescription() As String
		Get
			Return Me._SiteDescription
		End Get
		Set
			If (String.Equals(Me._SiteDescription, value) = false) Then
				Me.OnSiteDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SiteDescription = value
				Me.SendPropertyChanged("SiteDescription")
				Me.OnSiteDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteInternalDomain", DbType:="NVarChar(150)")>  _
	Public Property SiteInternalDomain() As String
		Get
			Return Me._SiteInternalDomain
		End Get
		Set
			If (String.Equals(Me._SiteInternalDomain, value) = false) Then
				Me.OnSiteInternalDomainChanging(value)
				Me.SendPropertyChanging
				Me._SiteInternalDomain = value
				Me.SendPropertyChanged("SiteInternalDomain")
				Me.OnSiteInternalDomainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(150)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrganisationDetail_Site", Storage:="_OrganisationDetail", ThisKey:="OrganisationID", OtherKey:="OrganisationID", IsForeignKey:=true)>  _
	Public Property OrganisationDetail() As OrganisationDetail
		Get
			Return Me._OrganisationDetail.Entity
		End Get
		Set
			Dim previousValue As OrganisationDetail = Me._OrganisationDetail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrganisationDetail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrganisationDetail.Entity = Nothing
					previousValue.Sites.Remove(Me)
				End If
				Me._OrganisationDetail.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sites.Add(Me)
					Me._OrganisationID = value.OrganisationID
				Else
					Me._OrganisationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OrganisationDetail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SecurityAssociationEmployeeView")>  _
Partial Public Class SecurityAssociationEmployeeView
	
	Private _OrganisationID As Integer
	
	Private _EmployeeID As Integer
	
	Private _AccountIdName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", DbType:="Int NOT NULL")>  _
	Public Property OrganisationID() As Integer
		Get
			Return Me._OrganisationID
		End Get
		Set
			If ((Me._OrganisationID = value)  _
						= false) Then
				Me._OrganisationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int NOT NULL")>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me._EmployeeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountIdName", DbType:="NVarChar(50)")>  _
	Public Property AccountIdName() As String
		Get
			Return Me._AccountIdName
		End Get
		Set
			If (String.Equals(Me._AccountIdName, value) = false) Then
				Me._AccountIdName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SubnetType")>  _
Partial Public Class SubnetType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SubnetTypeID As Integer
	
	Private _SubnetType As String
	
	Private _Comments As String
	
	Private _Subnet As EntityRef(Of Subnet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubnetTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubnetTypeIDChanged()
    End Sub
    Partial Private Sub OnSubnetTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSubnetTypeChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Subnet = CType(Nothing, EntityRef(Of Subnet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnetTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SubnetTypeID() As Integer
		Get
			Return Me._SubnetTypeID
		End Get
		Set
			If ((Me._SubnetTypeID = value)  _
						= false) Then
				If Me._Subnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubnetTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubnetTypeID = value
				Me.SendPropertyChanged("SubnetTypeID")
				Me.OnSubnetTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnetType", DbType:="NVarChar(150)")>  _
	Public Property SubnetType() As String
		Get
			Return Me._SubnetType
		End Get
		Set
			If (String.Equals(Me._SubnetType, value) = false) Then
				Me.OnSubnetTypeChanging(value)
				Me.SendPropertyChanging
				Me._SubnetType = value
				Me.SendPropertyChanged("SubnetType")
				Me.OnSubnetTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subnet_SubnetType", Storage:="_Subnet", ThisKey:="SubnetTypeID", OtherKey:="SubnettypeID", IsForeignKey:=true)>  _
	Public Property Subnet() As Subnet
		Get
			Return Me._Subnet.Entity
		End Get
		Set
			Dim previousValue As Subnet = Me._Subnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Subnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Subnet.Entity = Nothing
					previousValue.SubnetTypes.Remove(Me)
				End If
				Me._Subnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubnetTypes.Add(Me)
					Me._SubnetTypeID = value.SubnettypeID
				Else
					Me._SubnetTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Subnet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NIC")>  _
Partial Public Class NIC
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nicID As Integer
	
	Private _DeviceID As Integer
	
	Private _AddressIPV4 As String
	
	Private _AddressIPV6 As String
	
	Private _SubnetID As System.Nullable(Of Integer)
	
	Private _Subnet As EntityRef(Of Subnet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnicIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnicIDChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnAddressIPV4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressIPV4Changed()
    End Sub
    Partial Private Sub OnAddressIPV6Changing(value As String)
    End Sub
    Partial Private Sub OnAddressIPV6Changed()
    End Sub
    Partial Private Sub OnSubnetIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubnetIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Subnet = CType(Nothing, EntityRef(Of Subnet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nicID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property nicID() As Integer
		Get
			Return Me._nicID
		End Get
		Set
			If ((Me._nicID = value)  _
						= false) Then
				Me.OnnicIDChanging(value)
				Me.SendPropertyChanging
				Me._nicID = value
				Me.SendPropertyChanged("nicID")
				Me.OnnicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="Int NOT NULL")>  _
	Public Property DeviceID() As Integer
		Get
			Return Me._DeviceID
		End Get
		Set
			If ((Me._DeviceID = value)  _
						= false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressIPV4", DbType:="NVarChar(50)")>  _
	Public Property AddressIPV4() As String
		Get
			Return Me._AddressIPV4
		End Get
		Set
			If (String.Equals(Me._AddressIPV4, value) = false) Then
				Me.OnAddressIPV4Changing(value)
				Me.SendPropertyChanging
				Me._AddressIPV4 = value
				Me.SendPropertyChanged("AddressIPV4")
				Me.OnAddressIPV4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressIPV6", DbType:="NVarChar(50)")>  _
	Public Property AddressIPV6() As String
		Get
			Return Me._AddressIPV6
		End Get
		Set
			If (String.Equals(Me._AddressIPV6, value) = false) Then
				Me.OnAddressIPV6Changing(value)
				Me.SendPropertyChanging
				Me._AddressIPV6 = value
				Me.SendPropertyChanged("AddressIPV6")
				Me.OnAddressIPV6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnetID", DbType:="Int")>  _
	Public Property SubnetID() As System.Nullable(Of Integer)
		Get
			Return Me._SubnetID
		End Get
		Set
			If (Me._SubnetID.Equals(value) = false) Then
				If Me._Subnet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubnetIDChanging(value)
				Me.SendPropertyChanging
				Me._SubnetID = value
				Me.SendPropertyChanged("SubnetID")
				Me.OnSubnetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subnet_NIC", Storage:="_Subnet", ThisKey:="SubnetID", OtherKey:="SubnetID", IsForeignKey:=true)>  _
	Public Property Subnet() As Subnet
		Get
			Return Me._Subnet.Entity
		End Get
		Set
			Dim previousValue As Subnet = Me._Subnet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Subnet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Subnet.Entity = Nothing
					previousValue.NICs.Remove(Me)
				End If
				Me._Subnet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NICs.Add(Me)
					Me._SubnetID = value.SubnetID
				Else
					Me._SubnetID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Subnet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Subnet")>  _
Partial Public Class Subnet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SubnetID As Integer
	
	Private _SiteID As Integer
	
	Private _SubnettypeID As Integer
	
	Private _SubnetDescription As String
	
	Private _DefaultGW As String
	
	Private _DNS1 As String
	
	Private _DNS2 As String
	
	Private _NetMask As String
	
	Private _SubnetTypes As EntitySet(Of SubnetType)
	
	Private _NICs As EntitySet(Of NIC)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubnetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubnetIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnSubnettypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubnettypeIDChanged()
    End Sub
    Partial Private Sub OnSubnetDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSubnetDescriptionChanged()
    End Sub
    Partial Private Sub OnDefaultGWChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultGWChanged()
    End Sub
    Partial Private Sub OnDNS1Changing(value As String)
    End Sub
    Partial Private Sub OnDNS1Changed()
    End Sub
    Partial Private Sub OnDNS2Changing(value As String)
    End Sub
    Partial Private Sub OnDNS2Changed()
    End Sub
    Partial Private Sub OnNetMaskChanging(value As String)
    End Sub
    Partial Private Sub OnNetMaskChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubnetTypes = New EntitySet(Of SubnetType)(AddressOf Me.attach_SubnetTypes, AddressOf Me.detach_SubnetTypes)
		Me._NICs = New EntitySet(Of NIC)(AddressOf Me.attach_NICs, AddressOf Me.detach_NICs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnetID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SubnetID() As Integer
		Get
			Return Me._SubnetID
		End Get
		Set
			If ((Me._SubnetID = value)  _
						= false) Then
				Me.OnSubnetIDChanging(value)
				Me.SendPropertyChanging
				Me._SubnetID = value
				Me.SendPropertyChanged("SubnetID")
				Me.OnSubnetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int NOT NULL")>  _
	Public Property SiteID() As Integer
		Get
			Return Me._SiteID
		End Get
		Set
			If ((Me._SiteID = value)  _
						= false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnettypeID", DbType:="Int NOT NULL")>  _
	Public Property SubnettypeID() As Integer
		Get
			Return Me._SubnettypeID
		End Get
		Set
			If ((Me._SubnettypeID = value)  _
						= false) Then
				Me.OnSubnettypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubnettypeID = value
				Me.SendPropertyChanged("SubnettypeID")
				Me.OnSubnettypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubnetDescription", DbType:="NVarChar(50)")>  _
	Public Property SubnetDescription() As String
		Get
			Return Me._SubnetDescription
		End Get
		Set
			If (String.Equals(Me._SubnetDescription, value) = false) Then
				Me.OnSubnetDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SubnetDescription = value
				Me.SendPropertyChanged("SubnetDescription")
				Me.OnSubnetDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultGW", DbType:="NChar(15)")>  _
	Public Property DefaultGW() As String
		Get
			Return Me._DefaultGW
		End Get
		Set
			If (String.Equals(Me._DefaultGW, value) = false) Then
				Me.OnDefaultGWChanging(value)
				Me.SendPropertyChanging
				Me._DefaultGW = value
				Me.SendPropertyChanged("DefaultGW")
				Me.OnDefaultGWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS1", DbType:="NChar(15)")>  _
	Public Property DNS1() As String
		Get
			Return Me._DNS1
		End Get
		Set
			If (String.Equals(Me._DNS1, value) = false) Then
				Me.OnDNS1Changing(value)
				Me.SendPropertyChanging
				Me._DNS1 = value
				Me.SendPropertyChanged("DNS1")
				Me.OnDNS1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS2", DbType:="NChar(15)")>  _
	Public Property DNS2() As String
		Get
			Return Me._DNS2
		End Get
		Set
			If (String.Equals(Me._DNS2, value) = false) Then
				Me.OnDNS2Changing(value)
				Me.SendPropertyChanging
				Me._DNS2 = value
				Me.SendPropertyChanged("DNS2")
				Me.OnDNS2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetMask", DbType:="NChar(15)")>  _
	Public Property NetMask() As String
		Get
			Return Me._NetMask
		End Get
		Set
			If (String.Equals(Me._NetMask, value) = false) Then
				Me.OnNetMaskChanging(value)
				Me.SendPropertyChanging
				Me._NetMask = value
				Me.SendPropertyChanged("NetMask")
				Me.OnNetMaskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subnet_SubnetType", Storage:="_SubnetTypes", ThisKey:="SubnettypeID", OtherKey:="SubnetTypeID")>  _
	Public Property SubnetTypes() As EntitySet(Of SubnetType)
		Get
			Return Me._SubnetTypes
		End Get
		Set
			Me._SubnetTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subnet_NIC", Storage:="_NICs", ThisKey:="SubnetID", OtherKey:="SubnetID")>  _
	Public Property NICs() As EntitySet(Of NIC)
		Get
			Return Me._NICs
		End Get
		Set
			Me._NICs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubnetTypes(ByVal entity As SubnetType)
		Me.SendPropertyChanging
		entity.Subnet = Me
	End Sub
	
	Private Sub detach_SubnetTypes(ByVal entity As SubnetType)
		Me.SendPropertyChanging
		entity.Subnet = Nothing
	End Sub
	
	Private Sub attach_NICs(ByVal entity As NIC)
		Me.SendPropertyChanging
		entity.Subnet = Me
	End Sub
	
	Private Sub detach_NICs(ByVal entity As NIC)
		Me.SendPropertyChanging
		entity.Subnet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DeviceStatus")>  _
Partial Public Class DeviceStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DeviceStatusID As Integer
	
	Private _DeviceStatus As String
	
	Private _Comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeviceStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeviceStatusIDChanged()
    End Sub
    Partial Private Sub OnDeviceStatusChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceStatusChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatusID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DeviceStatusID() As Integer
		Get
			Return Me._DeviceStatusID
		End Get
		Set
			If ((Me._DeviceStatusID = value)  _
						= false) Then
				Me.OnDeviceStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceStatusID = value
				Me.SendPropertyChanged("DeviceStatusID")
				Me.OnDeviceStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatus", DbType:="NVarChar(50)")>  _
	Public Property DeviceStatus() As String
		Get
			Return Me._DeviceStatus
		End Get
		Set
			If (String.Equals(Me._DeviceStatus, value) = false) Then
				Me.OnDeviceStatusChanging(value)
				Me.SendPropertyChanging
				Me._DeviceStatus = value
				Me.SendPropertyChanged("DeviceStatus")
				Me.OnDeviceStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DeviceOrganisationSiteParentView")>  _
Partial Public Class DeviceOrganisationSiteParentView
	
	Private _ModelNumber As String
	
	Private _SerialNumber As String
	
	Private _ThirdPartyDetails As String
	
	Private _Specification As String
	
	Private _Comments As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _HostName As String
	
	Private _SiteName As String
	
	Private _AccountIdName As String
	
	Private _OrganisationID As Integer
	
	Private _DeviceStatus As String
	
	Private _ParentDevice As String
	
	Private _ParentDeviceID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelNumber", DbType:="NVarChar(50)")>  _
	Public Property ModelNumber() As String
		Get
			Return Me._ModelNumber
		End Get
		Set
			If (String.Equals(Me._ModelNumber, value) = false) Then
				Me._ModelNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SerialNumber", DbType:="NVarChar(50)")>  _
	Public Property SerialNumber() As String
		Get
			Return Me._SerialNumber
		End Get
		Set
			If (String.Equals(Me._SerialNumber, value) = false) Then
				Me._SerialNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThirdPartyDetails", DbType:="NVarChar(MAX)")>  _
	Public Property ThirdPartyDetails() As String
		Get
			Return Me._ThirdPartyDetails
		End Get
		Set
			If (String.Equals(Me._ThirdPartyDetails, value) = false) Then
				Me._ThirdPartyDetails = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Specification", DbType:="NVarChar(MAX)")>  _
	Public Property Specification() As String
		Get
			Return Me._Specification
		End Get
		Set
			If (String.Equals(Me._Specification, value) = false) Then
				Me._Specification = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me._Comments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HostName", DbType:="NVarChar(150)")>  _
	Public Property HostName() As String
		Get
			Return Me._HostName
		End Get
		Set
			If (String.Equals(Me._HostName, value) = false) Then
				Me._HostName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(150)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountIdName", DbType:="NVarChar(50)")>  _
	Public Property AccountIdName() As String
		Get
			Return Me._AccountIdName
		End Get
		Set
			If (String.Equals(Me._AccountIdName, value) = false) Then
				Me._AccountIdName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", DbType:="Int NOT NULL")>  _
	Public Property OrganisationID() As Integer
		Get
			Return Me._OrganisationID
		End Get
		Set
			If ((Me._OrganisationID = value)  _
						= false) Then
				Me._OrganisationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatus", DbType:="NVarChar(50)")>  _
	Public Property DeviceStatus() As String
		Get
			Return Me._DeviceStatus
		End Get
		Set
			If (String.Equals(Me._DeviceStatus, value) = false) Then
				Me._DeviceStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentDevice", DbType:="NVarChar(150)")>  _
	Public Property ParentDevice() As String
		Get
			Return Me._ParentDevice
		End Get
		Set
			If (String.Equals(Me._ParentDevice, value) = false) Then
				Me._ParentDevice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentDeviceID", DbType:="Int NOT NULL")>  _
	Public Property ParentDeviceID() As Integer
		Get
			Return Me._ParentDeviceID
		End Get
		Set
			If ((Me._ParentDeviceID = value)  _
						= false) Then
				Me._ParentDeviceID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CredentialsType")>  _
Partial Public Class CredentialsType
	
	Private _CredentialsTypeID As Integer
	
	Private _CredentialsType As String
	
	Private _Comments As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CredentialsTypeID", DbType:="Int NOT NULL")>  _
	Public Property CredentialsTypeID() As Integer
		Get
			Return Me._CredentialsTypeID
		End Get
		Set
			If ((Me._CredentialsTypeID = value)  _
						= false) Then
				Me._CredentialsTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CredentialsType", DbType:="NVarChar(50)")>  _
	Public Property CredentialsType() As String
		Get
			Return Me._CredentialsType
		End Get
		Set
			If (String.Equals(Me._CredentialsType, value) = false) Then
				Me._CredentialsType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me._Comments = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Credentials")>  _
Partial Public Class Credential
	
	Private _CredentialsID As Integer
	
	Private _CredentialsTypeID As Integer
	
	Private _OperatingSystemID As System.Nullable(Of Integer)
	
	Private _DeviceID As System.Nullable(Of Integer)
	
	Private _ApplicationID As System.Nullable(Of Integer)
	
	Private _OrganisationID As System.Nullable(Of Integer)
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Account As String
	
	Private _Comments As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CredentialsID", DbType:="Int NOT NULL")>  _
	Public Property CredentialsID() As Integer
		Get
			Return Me._CredentialsID
		End Get
		Set
			If ((Me._CredentialsID = value)  _
						= false) Then
				Me._CredentialsID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CredentialsTypeID", DbType:="Int NOT NULL")>  _
	Public Property CredentialsTypeID() As Integer
		Get
			Return Me._CredentialsTypeID
		End Get
		Set
			If ((Me._CredentialsTypeID = value)  _
						= false) Then
				Me._CredentialsTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystemID", DbType:="Int")>  _
	Public Property OperatingSystemID() As System.Nullable(Of Integer)
		Get
			Return Me._OperatingSystemID
		End Get
		Set
			If (Me._OperatingSystemID.Equals(value) = false) Then
				Me._OperatingSystemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="Int")>  _
	Public Property DeviceID() As System.Nullable(Of Integer)
		Get
			Return Me._DeviceID
		End Get
		Set
			If (Me._DeviceID.Equals(value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="Int")>  _
	Public Property ApplicationID() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganisationID", DbType:="Int")>  _
	Public Property OrganisationID() As System.Nullable(Of Integer)
		Get
			Return Me._OrganisationID
		End Get
		Set
			If (Me._OrganisationID.Equals(value) = false) Then
				Me._OrganisationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(50)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me._Username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="NVarChar(50)")>  _
	Public Property Account() As String
		Get
			Return Me._Account
		End Get
		Set
			If (String.Equals(Me._Account, value) = false) Then
				Me._Account = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me._Comments = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Device")>  _
Partial Public Class Device
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DeviceID As Integer
	
	Private _ModelNumber As String
	
	Private _SerialNumber As String
	
	Private _ThirdPartyDetails As String
	
	Private _Specification As String
	
	Private _Comments As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _DeviceStatusID As Integer
	
	Private _SiteID As System.Nullable(Of Integer)
	
	Private _ParentDeviceID As Integer
	
	Private _HostName As String
	
	Private _OperatingSystemID As Integer
	
	Private _OperatingSystems As EntitySet(Of OperatingSystem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnModelNumberChanging(value As String)
    End Sub
    Partial Private Sub OnModelNumberChanged()
    End Sub
    Partial Private Sub OnSerialNumberChanging(value As String)
    End Sub
    Partial Private Sub OnSerialNumberChanged()
    End Sub
    Partial Private Sub OnThirdPartyDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnThirdPartyDetailsChanged()
    End Sub
    Partial Private Sub OnSpecificationChanging(value As String)
    End Sub
    Partial Private Sub OnSpecificationChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDeviceStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeviceStatusIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnParentDeviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentDeviceIDChanged()
    End Sub
    Partial Private Sub OnHostNameChanging(value As String)
    End Sub
    Partial Private Sub OnHostNameChanged()
    End Sub
    Partial Private Sub OnOperatingSystemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOperatingSystemIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OperatingSystems = New EntitySet(Of OperatingSystem)(AddressOf Me.attach_OperatingSystems, AddressOf Me.detach_OperatingSystems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DeviceID() As Integer
		Get
			Return Me._DeviceID
		End Get
		Set
			If ((Me._DeviceID = value)  _
						= false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelNumber", DbType:="NVarChar(50)")>  _
	Public Property ModelNumber() As String
		Get
			Return Me._ModelNumber
		End Get
		Set
			If (String.Equals(Me._ModelNumber, value) = false) Then
				Me.OnModelNumberChanging(value)
				Me.SendPropertyChanging
				Me._ModelNumber = value
				Me.SendPropertyChanged("ModelNumber")
				Me.OnModelNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SerialNumber", DbType:="NVarChar(50)")>  _
	Public Property SerialNumber() As String
		Get
			Return Me._SerialNumber
		End Get
		Set
			If (String.Equals(Me._SerialNumber, value) = false) Then
				Me.OnSerialNumberChanging(value)
				Me.SendPropertyChanging
				Me._SerialNumber = value
				Me.SendPropertyChanged("SerialNumber")
				Me.OnSerialNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThirdPartyDetails", DbType:="NVarChar(MAX)")>  _
	Public Property ThirdPartyDetails() As String
		Get
			Return Me._ThirdPartyDetails
		End Get
		Set
			If (String.Equals(Me._ThirdPartyDetails, value) = false) Then
				Me.OnThirdPartyDetailsChanging(value)
				Me.SendPropertyChanging
				Me._ThirdPartyDetails = value
				Me.SendPropertyChanged("ThirdPartyDetails")
				Me.OnThirdPartyDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Specification", DbType:="NVarChar(MAX)")>  _
	Public Property Specification() As String
		Get
			Return Me._Specification
		End Get
		Set
			If (String.Equals(Me._Specification, value) = false) Then
				Me.OnSpecificationChanging(value)
				Me.SendPropertyChanging
				Me._Specification = value
				Me.SendPropertyChanged("Specification")
				Me.OnSpecificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatusID", DbType:="Int NOT NULL")>  _
	Public Property DeviceStatusID() As Integer
		Get
			Return Me._DeviceStatusID
		End Get
		Set
			If ((Me._DeviceStatusID = value)  _
						= false) Then
				Me.OnDeviceStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceStatusID = value
				Me.SendPropertyChanged("DeviceStatusID")
				Me.OnDeviceStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int")>  _
	Public Property SiteID() As System.Nullable(Of Integer)
		Get
			Return Me._SiteID
		End Get
		Set
			If (Me._SiteID.Equals(value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentDeviceID", DbType:="Int NOT NULL")>  _
	Public Property ParentDeviceID() As Integer
		Get
			Return Me._ParentDeviceID
		End Get
		Set
			If ((Me._ParentDeviceID = value)  _
						= false) Then
				Me.OnParentDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentDeviceID = value
				Me.SendPropertyChanged("ParentDeviceID")
				Me.OnParentDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HostName", DbType:="NVarChar(150)")>  _
	Public Property HostName() As String
		Get
			Return Me._HostName
		End Get
		Set
			If (String.Equals(Me._HostName, value) = false) Then
				Me.OnHostNameChanging(value)
				Me.SendPropertyChanging
				Me._HostName = value
				Me.SendPropertyChanged("HostName")
				Me.OnHostNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystemID", DbType:="Int NOT NULL")>  _
	Public Property OperatingSystemID() As Integer
		Get
			Return Me._OperatingSystemID
		End Get
		Set
			If ((Me._OperatingSystemID = value)  _
						= false) Then
				Me.OnOperatingSystemIDChanging(value)
				Me.SendPropertyChanging
				Me._OperatingSystemID = value
				Me.SendPropertyChanged("OperatingSystemID")
				Me.OnOperatingSystemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Device_OperatingSystem", Storage:="_OperatingSystems", ThisKey:="OperatingSystemID", OtherKey:="OperatingSystemID")>  _
	Public Property OperatingSystems() As EntitySet(Of OperatingSystem)
		Get
			Return Me._OperatingSystems
		End Get
		Set
			Me._OperatingSystems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OperatingSystems(ByVal entity As OperatingSystem)
		Me.SendPropertyChanging
		entity.Device = Me
	End Sub
	
	Private Sub detach_OperatingSystems(ByVal entity As OperatingSystem)
		Me.SendPropertyChanging
		entity.Device = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OperatingSystem")>  _
Partial Public Class OperatingSystem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OperatingSystemID As Integer
	
	Private _OperatingSystem As String
	
	Private _Comments As String
	
	Private _Device As EntityRef(Of Device)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOperatingSystemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOperatingSystemIDChanged()
    End Sub
    Partial Private Sub OnOperatingSystemChanging(value As String)
    End Sub
    Partial Private Sub OnOperatingSystemChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Device = CType(Nothing, EntityRef(Of Device))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OperatingSystemID() As Integer
		Get
			Return Me._OperatingSystemID
		End Get
		Set
			If ((Me._OperatingSystemID = value)  _
						= false) Then
				If Me._Device.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOperatingSystemIDChanging(value)
				Me.SendPropertyChanging
				Me._OperatingSystemID = value
				Me.SendPropertyChanged("OperatingSystemID")
				Me.OnOperatingSystemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystem", DbType:="NVarChar(150)")>  _
	Public Property OperatingSystem() As String
		Get
			Return Me._OperatingSystem
		End Get
		Set
			If (String.Equals(Me._OperatingSystem, value) = false) Then
				Me.OnOperatingSystemChanging(value)
				Me.SendPropertyChanging
				Me._OperatingSystem = value
				Me.SendPropertyChanged("OperatingSystem")
				Me.OnOperatingSystemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Device_OperatingSystem", Storage:="_Device", ThisKey:="OperatingSystemID", OtherKey:="OperatingSystemID", IsForeignKey:=true)>  _
	Public Property Device() As Device
		Get
			Return Me._Device.Entity
		End Get
		Set
			Dim previousValue As Device = Me._Device.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Device.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Device.Entity = Nothing
					previousValue.OperatingSystems.Remove(Me)
				End If
				Me._Device.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OperatingSystems.Add(Me)
					Me._OperatingSystemID = value.OperatingSystemID
				Else
					Me._OperatingSystemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Device")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DeviceDeviceStatusView")>  _
Partial Public Class DeviceDeviceStatusView
	
	Private _DeviceID As Integer
	
	Private _ModelNumber As String
	
	Private _SerialNumber As String
	
	Private _ThirdPartyDetails As String
	
	Private _Specification As String
	
	Private _Comments As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _DeviceStatusID As Integer
	
	Private _SiteID As System.Nullable(Of Integer)
	
	Private _ParentDeviceID As Integer
	
	Private _HostName As String
	
	Private _OperatingSystemID As Integer
	
	Private _DeviceStatus As String
	
	Private _SiteName As String
	
	Private _OperatingSystem As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="Int NOT NULL")>  _
	Public Property DeviceID() As Integer
		Get
			Return Me._DeviceID
		End Get
		Set
			If ((Me._DeviceID = value)  _
						= false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelNumber", DbType:="NVarChar(50)")>  _
	Public Property ModelNumber() As String
		Get
			Return Me._ModelNumber
		End Get
		Set
			If (String.Equals(Me._ModelNumber, value) = false) Then
				Me._ModelNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SerialNumber", DbType:="NVarChar(50)")>  _
	Public Property SerialNumber() As String
		Get
			Return Me._SerialNumber
		End Get
		Set
			If (String.Equals(Me._SerialNumber, value) = false) Then
				Me._SerialNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThirdPartyDetails", DbType:="NVarChar(MAX)")>  _
	Public Property ThirdPartyDetails() As String
		Get
			Return Me._ThirdPartyDetails
		End Get
		Set
			If (String.Equals(Me._ThirdPartyDetails, value) = false) Then
				Me._ThirdPartyDetails = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Specification", DbType:="NVarChar(MAX)")>  _
	Public Property Specification() As String
		Get
			Return Me._Specification
		End Get
		Set
			If (String.Equals(Me._Specification, value) = false) Then
				Me._Specification = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me._Comments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatusID", DbType:="Int NOT NULL")>  _
	Public Property DeviceStatusID() As Integer
		Get
			Return Me._DeviceStatusID
		End Get
		Set
			If ((Me._DeviceStatusID = value)  _
						= false) Then
				Me._DeviceStatusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int")>  _
	Public Property SiteID() As System.Nullable(Of Integer)
		Get
			Return Me._SiteID
		End Get
		Set
			If (Me._SiteID.Equals(value) = false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentDeviceID", DbType:="Int NOT NULL")>  _
	Public Property ParentDeviceID() As Integer
		Get
			Return Me._ParentDeviceID
		End Get
		Set
			If ((Me._ParentDeviceID = value)  _
						= false) Then
				Me._ParentDeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HostName", DbType:="NVarChar(150)")>  _
	Public Property HostName() As String
		Get
			Return Me._HostName
		End Get
		Set
			If (String.Equals(Me._HostName, value) = false) Then
				Me._HostName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystemID", DbType:="Int NOT NULL")>  _
	Public Property OperatingSystemID() As Integer
		Get
			Return Me._OperatingSystemID
		End Get
		Set
			If ((Me._OperatingSystemID = value)  _
						= false) Then
				Me._OperatingSystemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceStatus", DbType:="NVarChar(50)")>  _
	Public Property DeviceStatus() As String
		Get
			Return Me._DeviceStatus
		End Get
		Set
			If (String.Equals(Me._DeviceStatus, value) = false) Then
				Me._DeviceStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(150)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OperatingSystem", DbType:="NVarChar(150)")>  _
	Public Property OperatingSystem() As String
		Get
			Return Me._OperatingSystem
		End Get
		Set
			If (String.Equals(Me._OperatingSystem, value) = false) Then
				Me._OperatingSystem = value
			End If
		End Set
	End Property
End Class
